Project: Webserver Next Generation

Purpose: 


Data Structures:
     File types and content types that can be handled by webserver
     are listed in configuration file called web.config.

     Before the server accepts any client call, it reads the config
     file and loads all the type info into an array

     First type element is the DEFAULT - text/plain type.

     struct ftype{char* extension, char* content_type};
     - struct ftype *table (static variable to hold the begin of the array)
     - total size  (set to 10 initially)
     - current size(number of elements in array)
     
     Adding elements to array
     - malloc 10 * sizeof(struct ftype)
     START
     - if current size < total size
	     -set extension and content type at current size to
	      table[current size].extension and
	      table[current size].content_type respectively.
	     -increment the current size
     - else
	    - realloc the array with double the total size
	    - update total size
	    - go to START  

     Searching elements in array
     - loop through array till current size
        - string compare the passed in extension with 
	  table[loop_index].extension
	- if found break and return the table[loop_index].content_type
     - end loop
     - if not found return table[0].content_type


Program :

 	Better Reply Headers:
 	Uses the given function rfc822_time() to get the date string
 	This function returns time in rfc standard as a string which 
 	is then writtent to header.
 	Server name and version are #defined and sent to header


      	HEAD method:
 	This command will only display headers and does not display contents.

      	HEAD command with directory or file:
      	 - just displays the headers and skips reading the directory 
      	       contents or file contents.
      	HEAD command with cgi:
 	 - In this case cgi might generate some content that needs 
	   to be put in the headers so the script needs to be run

   	   - creates pipe, 
   	   - fork()
   	   - if child process
     	     	- dup2 writing end of pipe to stdout
     		- closes reading end of pipe because it will not use it
     		- calls execl with the script file
   	   - parent process
     	     	- dup2 reading end of pipe to stdin
		- closes writing end of pipe because it will not use it
		- reads the stream till it encounters a blank line
	  	(note: a blank line is that separates headers from content)
	  	This way only header info generated by script running on
	  	child process will be read by parent process and sent to socket.


 	Table Driven Types:
     	Discussed above in data structure section.
	Gets the content type from the table based on file extension
	and sends it to header

	Directory listing with links:
	Content type delivered for GET on directory is changed to text/html.
	In order to make the links clickable, html should have link
	elements with href.
	pre-formatted html string with table row is taken and
	as the directory content is looped around, path and
	name of the listing, last modified time and 
	size are added to string using sprintf

	Formatted string is as follows:
	<tr>
		<td>< a href %s> %s</td> ( path and entry name)
		<td> %s</td>  ( for date)
		<td> %s</td>  ( for size)
	</tr>

	- init FLEXSTR
	- opendir
	  - START
	  - readdir
	    - if entry is not . and ..
	      - construct the path
	      - call stat on the entry
	      	     - get last modified data and size
 	      - sprintf on the formatted html string with table row
	      - add the string to FLEXSTR
	      - go to START
	  - return string stroed in FLEXSTR object
	    (this will be a html formated content)


	 Index files:
	 Before processing the directroy listings, code first checks
	 if a index.html or index.cgi exists.
	 if both exists index.html take precedence

	 - create a string with directory name and index.html
	 - call stat with that string
	    - if errno is not ENOENT
	        - index.html exists
		    - call do_cat 
		       - open file and read the contents
		       	 and send it to socket

	      
	 - create a string with directory name and index.cgi
	 - call stat with that string
	    - if errno is not ENOENT
	        - index.cgil exists
		    - call do_exec
		       - execute cgi script

          Handle errors:
	  - call stat with the request directory/file
	    - if errno = EACCES
	       - write header with 403: Forbidden error


	  Zombies:
	  Before the main loop starts set signal handler for SIGCHLD 
	  using sigaction().
	  Also set the sigaction.sa_flags to SA_RESTART.
	  This flag allows the system call accept()to try again
	  incase it was interrupted by SIGCHLD.

	  The signal handler calls waitpid with -1. This waits for 
	  all the child processes to receive their exit status and terminate
	  them gracefully rather than being defunct.

	  To avoid race condition for resetting errno status,
	  signal handling is blocked before accept call and unblock after 
	  handle call is called

	  main loop looks as follows:
	  - sigaction(SIGCHLD, SA_RESTART, signal_handler)
	
	  - while (1)
	      - block signal   