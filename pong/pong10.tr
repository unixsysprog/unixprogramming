.rm CH
.ds RH \s8pong\s0
.ds RF \s8page %\s0
.ds LF \s8Revised: 28 March 2010, 14:17EDT\s0
.DS C
.ft B
csci-e215
Assignment 4: pong
.ft R
.DE
.SH
Introduction
.LP
.sp 6p
For this assignment you will write a video game based on the
classic coin-operated computer game \(agpong.\(aa  This is a one-person
ping-pong game ; the object of the game is to keep the ball in
play as long as possible.  The main new idea in this project
is to think about and work with techniques for multi-tasking.
In writing this game, you will also 
work with screen management, signal and timer management, 
and the random number function.

After getting familiar with the structure of this program, you
will be better prepared to study servers, sockets, and
X-windows programming.
.SH
The Pong Board
.sp 6p
.LP
The pong playing screen looks like:
.RS
.TS
doublebox;
lw(0.15i) c lw(0.15i).
	T{
.ft C
.ps 8
.vs 9p
.nf

 BALLS LEFT: 2              TOTAL TIME:  2:19
------------------------------------------------
|
|                                              #
|                                              #
|                                              #
|                     O                        #
|
|
|
|
|
|
------------------------------------------------


.vs 12p
.ps 10
.ft R
T}
.TE
.RE

The pong screen consists of a paddle (the line of #'s), a ping pong
ball (the O), and a three-sided court.  The size of the court depends
on the size of the terminal window.  The court is surrounded by a
three-unit border.  That is, the bottom edge of the court is
three rows above the bottom of the screen, the left edge of the
court is three columns from the left of the screen, etc.
The height of the paddle is approximately one third of the
height of the court.  The paddle always stays in the same column.
The top of the paddle may not rise above the top of the court,
and the bottom of the padddle may not drop below the bottom of the
court.  
.sp 6p
.SH
Playing Pong
.LP
.sp 6p
The ball is served from the middle of the court with a random speed.
The ball bounces elastically against the walls.  The paddle, though,
introduces some uncertainty to the game.  Each time the ball bounces
off the paddle, the speed of the ball is changed by a small, random,
amount.
.sp 8p
The player moves the paddle up and down the screen, one row at a time,
by pressing the 'k' and 'm' keys, respectively.  Each press of the
key moves the paddle one row.  The paddle will not move beyond its
top and bottom limits.
.sp 8p
The goal of the game is to play for as long as possible.  The
amount of playing time (in minutes and seconds) is displayed
on the screen.
.sp 8p
If the ball gets past the paddle, the ball is out of play.  After
three balls, the game is over.  The number of balls left, not 
including the one in play, is displayed on the screen.
.sp 8p
The player may press the Q key to quit the game.
.sp 6p
.SH
A Suggested Outline
.LP
.sp 6p
You may solve this problem almost any way you like.  The following
steps describe the required modular part and also outline some ideas
and skills you may find helpful.
.sp 6p
.SH
Step One: Putting Up Walls
.sp 6p
.LP
The bounce2d program from class can serve as a basis for your
pong game.  Study how it uses curses to draw the ball and move
it along.  The important functions are \fC\s-1move(), addch(), refresh()\s0\fR.
\fC\s-1move(y,x)\s0\fR moves the cursor to a specified point on the screen.
\fC\s-1addch(c)\s0\fR puts a character at the current cursor position and
advances the cursor one place right.  \fC\s-1refresh()\s0\fR brings the
terminal screen up to date with all your requests.

The bounce program limits the ball to the exact region specified by
the pong board, but has invisible walls on all four sides.  Your version
must have visible walls on three sides and be open on the right.  To
get familiar with curses, modify bounce2d.c so that it draws the three
visible walls.  Remember, the size of the pong court depends on the size
of the terminal window unlike the fixed-size court of the bounce2d program.
.sp 6p
.SH
Step Two: Random Serve
.sp 6p
.LP
The bounce program always serves the ball with the same speed
and direction.  First, study how the motion is timed and controlled.
The ticks_to_move members is counter-intuitive.  One usually thinks
of speed as distance per unit of time not time per unit of distance.  Using 
ticks per move ensures that the ball will move smoothly from one character
position to an adjacent position.

.LP
To implement the random serve feature, read the manual page on
srand() and rand().  You can initialize, at the start of your
program,  the random number generator with \fC\s-1 srand(getpid())\s0\fR  and
create random numbers in the range 0..\s-1MAXNUM-1\s0 as 
needed by calling \fC\s-1 num = ( rand() % MAXNUM )\s0\fR.
.sp 9p
Generate a random number in a sensible range for the x-timer
and a random number in a sensible range for the y-timer.  See the
bounce code for a starting value for your experiments.
.sp 6p
.SH
Step Three: The Paddle - a required implementation
.sp 6p
.LP
The paddle is defined by a top y-coordinate, a bottom y-coordinate,
and an x-coordinate.  The x-coordinate is fixed.  The top and bottom
y-coordinates are controlled by user input.  You are \fIrequired\fR to
implement the paddle using the C approach to object oriented 
design: a separate C file and an associated header file.  
Create a file called paddle.c and define static data 
to store the state of the paddle.  You might
use:
.DS
.ft C
.ps 8
.vs 9p

struct pppaddle {    int     pad_top, pad_bot, pad_col;
                     char    pad_char;
       };

.vs 12p
.ps 10
.ft R
.DE
In that C file, write a few simple operations for the paddle:
\fC\s-1paddle_init()\s0\fR, \fC\s-1paddle_up()\s0\fR,
\fC\s-1paddle_down()\s0\fR, and \fC\s-1paddle_contact(y,x)\s0\fR.  
The \fC\s-1paddle_init()\s0\fR function must initialize the 
paddle data structure and draw it on the screen.  The 
up and down functions should check if the paddle has reached the
limits of its path, and if not, to adjust the data structure and 
then adjust the screen representation of the paddle.  
.sp 9p
The header file, paddle.h, will contain declarations for 
the non-static (i.e. public) functions in paddle.c
.sp 9p
The interesting one is \fC\s-1paddle_contact(y,x)\s0\fR.
The (y,x) position of the ball is passed to this function.  
This function tells if the ball at the given position is in 
contact with the paddle. The calling function can then bounce 
the ball appropriately.
.sp 9p
Other functions used by the paddle must be declared 
static to make them private to \fC\s-1paddle.c\s0\fR.
.sp 6p
.SH
Step Four: Bounce or Lose
.sp 6p
.LP
The main part of the game is controlled by the \fC\s-1bounce_or_lose()\s0\fR
function.  In the original bounce program, the ball bounces against
all four walls.  In your version, the ball bounces against
three walls.  At the right side, though, you need to determine
if the ball is hitting the paddle, or missing it.

In bounce2d.c, \fC\s-1bounce_or_lose\s0\fR returns 0 for no 
contact, or 1 for a bounce.
Change the function so it returns -1 for \(galose.\(aa  This can help the
calling program figure out what to do next.  Even better, #define symbolic
constants to make the code more readable.

How do you handle the value returned by \fC\s-1bounce_or_lose\s0\fR?
The bounce2d.c program has code for bouncing.  What about losing?  
If the ball
sails past the paddle, take it out of play, and if there is still
at least one ball left, serve another ball.  That will become the
current ball in play.  When there are no more to play, the 
\fC\s-1balls_left\s0\fR variable will hit zero and the game will end.

Finally, modify the program so the speed is slightly,
randomly, modified when it hits the paddle.  The speed is controlled
by the \fC\s-1ttm\s0\fR member of the struct.  Where in your program
do you add this?  Should you change the return value of 
\fC\s-1bounce_or_lose()\s0\fR to distinguish bouncing off the paddle
from bouncing off the walls?

.SH
Step Five: The Glue
.sp 6p
.LP
The pieces are now ready to assemble.  The main loop is only
slightly changed from the bounce program.  It will look something like

.DS
.ft C
.ps 8
.vs 9p
main()
{
	set_up();            /* init all stuff */
	serve();             /* start up ball  */

	while ( balls_left > 0 && ( c = getch() ) != 'Q' ){
		if ( c == 'k' )
			up_paddle();
		else if ( c == 'm' )
			down_paddle();
	}
	wrap_up();
}
.vs 12p
.ps 10
.ft R
.DE

The \fC\s-1up_paddle()\s0\fR and \fC\s-1down_paddle()\s0\fR functions should
check \fC\s-1bounce_or_lose()\s0\fR;a paddle could
intercept the ball.  Draw a few pictures to see how this case
works.  It could save the game sometimes.
.sp 6p
.SH
The Big Picture
.sp 6p
.LP
This initial design solves the problem of multi-tasking
by blocking on user input and running the animation with
signal-driven animation.  The two significant events are
character input and timer ticks.

In addition to these two events, there are three 
objects in the game: the ball, the paddle, and the 
court.  For each of these objects, consider what variables define
the object, how those variables change, and how the objects interact.

One object is the paddle, it has a position, and the position of
the paddle is changed by user input.  The user types a 'm' and
the state of the paddle changes: it moves down one space.  The
user types a 'k' and the state of the paddle changes again: it moves
up one space.

The ball is another object, it has a position and a
velocity.  This state is defined by six internal
values.  The position of the ball is changed by timer ticks,
and the direction of the ball is changed when it encounters the
walls or the paddle.

The function called \fC\s-1bounce_or_lose()\s0\fR compares the
position and speed of the ball to the walls and paddle and 
modifies the state of the ball or the game under
certain conditions.  The program has to call this function
each time the ball or the paddle moves.

Rather than look for a clear flow of control, look for the
interactions of the ball, the walls, the paddle, the human, and
time.  These shifting values define the game.

You could take an object-oriented approach to this problem
and define the paddle, the ball, the walls, and the out-of-bounds
region as objects.  When each object moves, you could loop through
all the other objects asking what interaction there is.
.sp 6p
.SH
Alternate Model -- Signals for Input and Timers
.sp 6p
.LP
The bounce2d.c example implements multi-tasking using
blocking for user input and signals for timer ticks.  The
text explains a method for using signals for user input and
also for timer ticks.  If you want to try this approach,
use aio_read() and compile with -lrt (as shown in the text.)
.SH
What To Hand In
.sp 6p
.LP
\fBRequired\fR: (using \fC\s-1~lib215/handin pong \s0\fR)
    a) A README cover page
    b) A design document  
    c) Source Code
    d) Makefile for your project
    e) A script of your program compiled with gcc -Wall 
.sp 4p
.LP
If you cannot get the entire thing working, get some subset
working and explain what it is supposed to do.
.SH
Extra Credit: Race Conditions
.sp 6p
.LP
The design of this game includes a race condition.
The problem can be explained by the following example: imagine you
press a key to move the paddle.  The paddle-draw function
then tells the terminal to move the cursor to a particular
cell on the screen and then tells the terminal to draw some
text on the screen.  But what if something happens between the
move operation and the draw operation.  Imagine a timer tick occurs 
mid-sequence, and imagine that timer tick causes the the ball to move.

The ball_move function moves the cursor to a different location then
draws the ball.  When control returns to the paddle drawing
function, the cursor is not where that function imagines it to be.
Therefore, part of the paddle may appear next to the ball.

These two screen operations, move then draw, are analogous to
the two file operations, lseek then write.  For files descriptors,
the kernel provides a solution with the \fC\s-1O_APPEND\s0\fP flag.
Curses does not provide a comparable feature.  Avoiding
data confusion when two parts of the program want to update
the screen at once, therefore, must be solved by the programmer.

You may earn five points of extra credit with a completely
reliable solution to this race condition problem.  Occasional
avoidance of race conditions is not a solution; an important
feature of race conditions is that they are only occasional
problems.
