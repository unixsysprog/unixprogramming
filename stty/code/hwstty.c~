#include        <stdio.h>
#include        <fcntl.h>
#include        <sys/ioctl.h>
#include        <errno.h>
#include        <ctype.h>
#include        <stdlib.h>
#include        <string.h>
#include        <termios.h>
#include        "flags.h"
/**
 **     sttyl
 **/

#define ASCII_DELETE   127

enum table_type { InputFlag, OutputFlag, ControlFlag, LocalFlag};

static void show_default(int , struct termios* info);
static void show_baud(speed_t );
static void show_rows_columns(int );
static void show_control_chars(struct termios* info);
static void show_terminal_flags(struct termios *);
static void show_flagset( int value, struct flaginfo bitnames[] );
static void process_arguments( int  , char** , struct termios* );
static int  find_flag(struct flaginfo* t[], char* , struct termios* , tcflag_t *);

int main(int ac, char* av[])
{
    int fd;
    struct termios ttyinfo;

    fd = open( "/dev/tty", O_RDONLY);

    if (fd == -1){
      fprintf(stderr,"stty-lite: %s\n", strerror(errno));
      exit(1);
    }

    if (tcgetattr(fd, &ttyinfo) == -1){
      fprintf(stderr,"stty-lite: %s\n", strerror(errno));
      exit(1);
    }

    if (ac == 1){
      show_default(fd ,&ttyinfo);
    }
    else{
      process_arguments(ac, av, &ttyinfo);
    }
    return 0;
}


void process_arguments(int nargs, char** argv, struct termios* info)
{
    int cur_arg = 1;
    int index = -1;
    char* cur_flag = NULL;

    while ( cur_arg < nargs){
      index = 0;     
      cur_flag = argv[cur_arg];
      if (index == 0) 
	index = find_flag(&input_flags, cur_flag, info, &info->c_iflag);
      if (index == 0)
	index = find_flag(&output_flags, cur_flag, info, &info->c_oflag);
      if (index == 0) 
	index = find_flag(&control_flags, cur_flag, info, &info->c_cflag);
      if (index == 0)
	index = find_flag(&local_flags, cur_flag, info, &info->c_lflag);

      if (index == 0){
	fprintf(stderr,"stty-lite:  invalid argument\n");
	exit(1);	
      }
      cur_arg++;
    }
}

int find_flag(struct flaginfo* table[], char* flag, struct termios* info, tcflag_t* tcflag)
{
    int i;
    int disableattr = 0;

    if (flag[0] == '-'){
      disableattr = 1;
      flag = flag+1;
    }

    for (i =0;  table[i]->fl_value != NULL ; i++)
    {
      if (strcmp(table[i]->fl_value, flag) == 0){
	if (disableattr == 1)
	  *tcflag &= ~(*tcflag);
	else
	  *tcflag |= *tcflag;
	
	tcsetattr(0, TCSANOW, info);
	return 1;
      }
    }
    return 0;
}

void show_default(int fd, struct termios* info)
{
    if (info ==  NULL)
      return;

    show_baud(cfgetospeed(info));      /* get and show baud rate */
    show_rows_columns(fd);             /* get and show rows and columns */
    show_control_chars(info);          /* get and show control characters */
    show_terminal_flags(info);         /* get and show terminal flags */
}



/*
 *      prints the speed
 */
void show_baud(speed_t  speed )
{
    switch (speed)
    {
        case B50:       printf("50 baud;");         break; 
        case B75:       printf("75 baud;");         break;
        case B110:      printf("110 baud;");        break;
        case B134:      printf("134.5 baud;");      break;
        case B150:      printf("150 baud;");        break;
        case B200:      printf("200 baud;");        break;
        case B300:      printf("300 baud;");        break;
        case B600:      printf("600 baud;");        break;
        case B1200:     printf("1200 baud;");       break;
        case B1800:     printf("1800 baud;");       break;
        case B2400:     printf("2400 baud;");       break;
        case B4800:     printf("4800 baud;");       break;
        case B9600:     printf("9600 baud;");       break;
        case B19200:    printf("19200 baud;");      break;
        case B38400:    printf("38400 baud;");      break;  
        default:        printf("Not identified;");  break;

    }
}


void show_rows_columns(int fd)
{
    if (fd == -1)
      return;

    struct winsize wininfo;

    if (ioctl(fd, TIOCGWINSZ, &wininfo) == -1 ){
      fprintf(stderr,"stty-lite: %s\n", strerror(errno));
      exit(1);
    }

    printf("rows %u; cols %u;\n", wininfo.ws_row, wininfo.ws_col);
}


void show_control_chars(struct termios* info)
{
    int i;
    char ch;

    if (info == NULL)
       return;
    
    for (i=0; c_ccflags[i].fl_name != NULL; i++)
    {
	ch = info->c_cc[c_ccflags[i].fl_value];
	//printf("the ascii character of %s  is:%d and index is: %d\n", c_ccflags[i].fl_name,ch, c_ccflags[i].fl_value);
	if (isprint(ch)){
	  printf("%s = %c;", c_ccflags[i].fl_name,'A' + ch -1);
	}
	else if (ch == ASCII_DELETE){
	  printf("%s = ^?;", c_ccflags[i].fl_name);
	}
	else if (ch == 0){
	  printf("%s = %s;", c_ccflags[i].fl_name,"<undef>");
	}
	else{
	  printf("%s = ^%c;", c_ccflags[i].fl_name, 'A' + ch -1);
	}
    }
    
}

/*
 *      show the values of two of the flag sets_: c_iflag and c_lflag
 *      adding c_oflag and c_cflag is pretty routine - just add new
 *      tables above and a bit more code below.
 */
void show_terminal_flags( struct termios *info )
{
    if (info == NULL)
      return;

    printf("\n");
    show_flagset(info->c_iflag, input_flags);

    printf("\n");
    show_flagset(info->c_lflag, local_flags);

    printf("\n");
    show_flagset(info->c_oflag, output_flags);

    printf("\n");
    show_flagset(info->c_cflag, control_flags);
    printf("\n");
}


/*
 * check each bit pattern and display descriptive title
 */
void show_flagset( int value, struct flaginfo bitnames[] )
{
    int     i;

    for ( i=0; bitnames[i].fl_name != NULL ; i++ )
    {
        if ( value & bitnames[i].fl_value )
	  printf("%s;",bitnames[i].fl_name);
        else
          printf("-%s;",bitnames[i].fl_name);
    }
}
