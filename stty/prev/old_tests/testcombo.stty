#!/bin/sh
# ---------------------------------------------------------------
#	test script for sttyl
#	last modified: 	20 mar 97 (moved tab3 out of big combo loop)
#	last modified: 	22 mar 95 (complete rewrite)
# ---------------------------------------------------------------

# ---------------------------------------------------------------
#	0: set vars and get name of program to test
# ---------------------------------------------------------------

	PROG=./sttyl
	STTY=/bin/stty
	DIR=/home/l/i/lib215/hmwks/stty
	FLAGS=$DIR/flags
	STTY=/bin/stty
	BASEPAT1=526:1805:a50:3b:0:3:1c:8:15:4:0:ff:ff:526:1805
	BASEPAT2=a50:8000003b:3:1c:8:15:4:0:ff:ff:ff:ff:ff:4:0
	BASEPAT3=1a:11:13:0:0:1a:19:0:0:0
	BASEPAT=$BASEPAT1:$BASEPAT2:$BASEPAT3

	if [ ! -f $PROG ]
	then
		echo There is no program here called $PROG , what program
		printf "do you want to test? "
		read PROG
		[ "$PROG" = "" ] && exit 
	fi

# ---------------------------------------------------------------
# check for tab3 soln vs tabs soln
# ---------------------------------------------------------------

	echo "Did you write a solution that handles tabs or tab3"
	printf "enter 1 for tabs, 2 for tab3: "
	read foo
	case "$foo" in
		1)	exec /home/l/i/lib215/hmwks/stty/testnew.stty	;;
		2)	;;
		*)	echo please enter 1 or 2	
			exit 1
			;;
	esac

# ---------------------------------------------------------------
#	1: prepare to exit in a graceful mode
#	   then set tty into base patter
# ---------------------------------------------------------------

	$STTY -g > /tmp/$$.stty
	OLDFLAGS=`cat /tmp/$$.stty`
	rm -f /tmp/$$.stty
	trap "echo resetting tty;$STTY $OLDFLAGS;rm -f $$.*;exit" 0 2 3 15
	$STTY $BASEPAT

# ---------------------------------------------------------------
#	test erase and kill chars
# ---------------------------------------------------------------

	echo "   0. Looking at output : tf should examine this "
	echo " "
	$PROG
	echo " "
	sleep 5

	echo "   I. testing erase and kill chars  "

	STATUS=OK

	# -------------------------------------------------------
	# 	simple chars
	# -------------------------------------------------------
	echo "	a. Simple chars .. \c"
	$PROG erase A kill B		# set em
	RESULT=`$FLAGS E K`		# test em
	$STTY $OLDFLAGS			# put 'em back
	if [  "$RESULT" = E=41K=42 ] 
	then
		echo OK
	else
		echo Failed to set erase to A and kill to B
		STATUS=NOTOK
	fi
	echo " "


	# -------------------------------------------------------
	# 	tricky case
	# -------------------------------------------------------
	echo "	b. Control Chars typed as Caret-Letter\c"
	$PROG erase \^H kill \^U	# beware of old pipe sign
	RESULT=`$FLAGS E K`
	$STTY $OLDFLAGS			# put 'em back
	if [  $RESULT = E=08K=15 ] 
	then
		echo OK
	else
		echo "Not OK
		Failed to set erase to caret-H or kill to caret-U"
		STATUS=NOTOK
	fi
	echo " "

	# -------------------------------------------------------
	# 	medium case
	# -------------------------------------------------------

	printf "	c. Typical one-char control chars.. "
	$PROG erase  kill 
	RESULT=`$FLAGS E K`
	$STTY $OLDFLAGS			# put 'em back
	if [  $RESULT = E=08K=15 ] 
	then
		echo OK
	else
		echo "Not OK
		Failed to set erase to ctrl-H and kill to ctrl-U "
		STATUS=NOTOK
	fi
	echo " "

	# -------------------------------------------------------
	# 	special, error, case
	# -------------------------------------------------------

	echo "	d. No argument given to erase..\c"
	$STTY erase '^H' kill '^U'
	$PROG erase 
	EXITSTAT=$?
	RESULT=`$FLAGS E K`
	$STTY $OLDFLAGS			# put 'em back
	NOARGS=OK
	[ $RESULT = E=08K=15 ] || NOARGS=NOTOK 
	if [ $NOARGS = OK ]
	then
		echo OK
		echo "	Note: your version exited with $EXITSTAT"
	else
		echo "Not OK
		Did not work correctly when no arg is given to erase"
		STATUS=NOTOK
	fi
	echo " "
	

	if [ $STATUS = NOTOK ]
	then
		echo "$PROG did not pass erase/kill test.  Continue (y/n)? \c"
		read ans
		case "$ans" in
			y*|Y*)		;;
			*) 	exit	;;
		esac
	fi

# ---------------------------------------------------------------
#  This part of the script tests how well the program 
#  sets and clears flags.  Results are written to files
#  in a directory called __Tests
# ---------------------------------------------------------------

	if [ -d __Tests ]			# --- prepare for next 
	then					# --- tests
		rm -f -r __Tests		# --- clear out old
	fi
	mkdir __Tests				# --- make new one


# ---------------------------------------------------------------
#	test all single functions
# ---------------------------------------------------------------

	$STTY erase  kill 	# to ensure compat. with script

	echo "  II. Checking each flag separately .. "
	for i in icrnl onlcr echo tab3 echoe olcuc icanon isig
	do
		echo "		$i .. \c"
		$STTY $BASEPAT		# start with sensible settings
			$PROG $i	# turn on option
			$FLAGS > $$.my	# record driver state
		if test $i != tab3 ; then
			$PROG -$i	# turn off option
			$FLAGS >> $$.my	# record driver state
		fi

		$STTY $BASEPAT		# force it to same settings
			$STTY $i	# turn on option
			$FLAGS > $$.hp	# record driver state
		if test $i != tab3 ; then
			$STTY -$i	# turn off option
			$FLAGS >> $$.hp	# record driver state
		fi

		if diff $$.my $$.hp > /dev/null
		then
			echo " OK \c"
		else
			echo " NOT OK \c"
			echo "Yours = ( setting $i, then setting -$i)"
				 $FLAGS X < $$.my
			echo  " Ours = ( setting $i, then setting -$i)"
				$FLAGS X < $$.hp
			echo " Make sure $i works for $PROG and try again."
			rm -f $$.*
			echo "Continue (y/n)? \c"
			read X
			case "_$X" in 
				_n*|_N*) exit ;;
			esac
		fi
		rm -f $$.*
		echo ""
	done

# ---------------------------------------------------------------
#	test all combo pairs
# ---------------------------------------------------------------

	echo " "
	echo " III. Checking all flag pairs"


	for i in icrnl onlcr echo tab3 echoe olcuc icanon isig
	do
		echo  " $i:\c"
		rm -f __Tests/$i.my
		for  j in icrnl onlcr echo tab3 echoe olcuc icanon isig
		do
			$STTY $BASEPAT
			# run the first one with test program
			echo " $j : \c" >> __Tests/$i.my
				$PROG $i $j
				$FLAGS >> __Tests/$i.my
				echo  " -$j : \c" >> __Tests/$i.my
			if test $j != tab3 ; then
				$PROG $i -$j 
				$FLAGS >> __Tests/$i.my
			fi

			# run the second test with `real' one
			$STTY $BASEPAT
			echo " $j : \c" >> __Tests/$i.hp
				$STTY $i $j
				$FLAGS >> __Tests/$i.hp
				echo  " -$j : \c" >> __Tests/$i.hp
			if test $j != tab3 ; then
				$STTY $i -$j 
				$FLAGS >> __Tests/$i.hp
			fi
			# if there are no differences, remove the files
		done
		if diff __Tests/$i.my __Tests/$i.hp > /dev/null
		then
			echo "OK\c"
			rm -f __Tests/$i.my __Tests/$i.hp
		else
			echo "NOTOK\c"
		fi
	done

	$STTY $OLDFLAGS
	echo " "
	cd __Tests
	echo "	Checking results .. "
	if test `ls | wc -w` = 0
	then
		echo all tests worked correctly
		exit 0
	fi

	echo "The Following combinations did not work:"
	for f in *.my
	do
		T=`basename $f .my`
		sort $T.my $T.hp 	| uniq -d 	|
		sed "s/\(.*\):.*/$T \1/"| sort -u	|
		pr -t -l1 -5
	done
	cd ..
