#!/bin/sh
#
#	test.smsh	version 1.6.4	/April 12 2011/B.Molay
#
#	modifications:
#			allowed user to continue past failing tests
#
#			changed cd test so it offers more info
#
#			changed error tests so they no longer require
#			EXACT duplicate of /bin/sh error messages
#
#			shell script to test smsh
#			1.4 expanded cd error message identification
#			1.5 added test for the exit built-in
#			1.6 added nested if test
#			1.6.1 added line 5 to nested if test
#			1.6.2 fixed the nested if testing to use  smsh file  vs smsh < file
#			1.6.3 allows for $HOME to begin with /nfs or others
#			1.6.4 allows for dash's cd message: "can't cd to /foo"
#
#	tests the following functions
#
#	1. read commands from a script
#	2. performs cd 
#	3. read varname
#		works like gets(), input a$, or readln() not
#		like the read in sh
#	4. variable substitution in command lines
#		- handles variables terminated by non-varname-chars
#		- must work like sh so that
#			X="-l /tmp" ; ls $X
#		  passes two args to ls, not one
#		- assignment operation must check varname chars
#			so that X.Y=3 is NOT an assignment statement
#		- handles $ in strings, not just at start of them
#		- handles backslashes in front of $ and in front of \
#
#	5. the if command
#		- should execute command, check exit status
#		- perform all then commands if true
#		- skip all then commands if false
#		- perform else commands if any if false
#		- identifies syntax errors 
#			a. missing fi	( hits eof )
#			b. missing then ( sees else or fi but no then )
#
#	6. the exit command
#
#	7. the nested if command

	case `hostname` in
		ice*)	;;
		*)	echo "Please test your program on nice"
			echo "You are currently logged in to `hostname`"
			exit
			;;
	esac

	DEEPDIR=/home/l/i/lib215/hw/smsh

	# echo "Not yet ready.  Try again later."
	# exit
	MULLIN=YES			# enable var substring test

# ---------------------------------------------------------------------
# 	get command name if not the standard name
# ---------------------------------------------------------------------

play_again()
{
	echo -n "Continue with tests (y/n)? "
	read answer
	case "$answer" in 
		y*|Y*)	;;
		*)	exit ;;
	esac
}

if test -x smsh
then
	PROG="./smsh"
else
	echo    "There is no program called smsh here.  What program should"
	echo -n "I test? "
	read PROG
	[ "_$PROG" = "_" ] && exit 1
	case $PROG in 
		*/*)	;;
		*)	PROG="./$PROG";;
	esac
fi

echo "  Testing $PROG as of `date`"
ls -l $PROG
echo ""

# ---------------------------------------------------------------------
# 	test 1: read from script
# ---------------------------------------------------------------------

echo "	* Test 1: Does the program read commands from a script? "

					# -- write script
echo "echo hello world
mkdir __testdir
cd __testdir
touch a b c d e f
ls a b c d e f
cd ..
rm -r __testdir" > __script1

$PROG __script1   > __output1.smsh	# -- run script
/bin/sh __script1 > __output1.sh		# -- with both shells

if diff __output1.sh __output1.smsh > test1.diffs
then
	echo "		OK"
else
	echo "		Not OK."
	echo "Did not work for the script:"
	echo "====================================="
	cat __script1
	echo "====================================="
	echo "Your output was:"
	echo "====================================="
	cat __output1.smsh
	
	exit
fi

rm -f __script1 __output1.smsh __output1.sh test1.diffs

# ---------------------------------------------------------------------
# 	test 2: Does cd work correctly?
# ---------------------------------------------------------------------

echo -n "	* Test 2a: Does cd work correctly? 
		"

echo "cd /tmp
pwd
cd /bad.directory
pwd" > __test2.in

$PROG < __test2.in 2> __test2.err > __test2.out		# -- test them

if grep /tmp __test2.out > /dev/null
then
	echo "cd works when the directory exists"
else
	echo "cd failed"
	echo -n "Continue with tests (y/n)? "
	read answer
	case "$answer" in 
		y*|Y*)	;;
		*)	exit ;;
	esac
fi

echo -n "		"
if egrep "can.t cd|ad directory|No such file|not found" __test2.err	# -- look for 
then							# -- some pattern
	echo "OK: cd detects bad directories"		# -- like sh's
else
	echo "cd does not report errors in a way I understand,"
	echo -n "Continue with tests (y/n)? "
	read answer
	case "$answer" in 
		y*|Y*)	;;
		*)	exit ;;
	esac
fi

echo -n "	* Test 2b: Does cd without args return to $HOME
		"

echo "cd
pwd" > __test2.in

$PROG __test2.in 2> __test2.err > __test2.out		# -- test them

if test "`awk '/home/ { gsub(/nfs\/home/, "home"); print $NF; }' __test2.out`" = $HOME 
then
	echo "OK: cd without an arg returns to \$HOME"
else
	echo "cd without an arg did not return to \$HOME"
	echo -n "Continue with tests (y/n)? "
	read answer
	case "$answer" in 
		y*|Y*)	;;
		*)	exit ;;
	esac
fi

rm -f __test2.in __test2.err __test2.out

# ---------------------------------------------------------------------
# 	check for variable substitution
# ---------------------------------------------------------------------

echo -n "	* Test 3: Does the shell do variable substitution correctly?
		and ignore dollar signs when asked?
		"

echo 'FIVE=5
Y=3
expr $FIVE + $Y
expr $FIVE$Y - 1
echo $Y/$Y.$FIVE
/bin/echo \$Y\\\$FIVE$FIVE' > test3.scr

$PROG test3.scr > test3.out.smsh
/bin/sh test3.scr > test3.out.sh

if diff test3.out.smsh test3.out.sh > test3.diffs
then
	echo "OK"
else
	echo "Did not work for"
	cat test3.scr
fi

rm -f test3.scr test3.out.smsh test3.out.sh test3.diffs

# -------------------------------------------------------
# the mullin test, enable with MULLIN=YES above
#
#
if test "$MULLIN" = YES
then
	printf "	* Test 3m: Does shell handle substring varnames?\n\n"

    echo 'A=hello
    ANT=bug
    ANTLER=elk
    echo line1: $A\\$A$A
    echo line2: $ANT $ANTLER $A $ANT$LER$ANT' > test3m.scr

    $PROG test3m.scr > test3m.out.smsh
    /bin/sh test3m.scr > test3m.out.sh

    if diff test3m.out.smsh test3m.out.sh > test3m.diffs
    then
	echo "OK"
    else
	echo "Did not work for"
	cat test3m.scr
	play_again
    fi

	printf "\n"

    rm -f test3m.scr test3m.out.smsh test3m.out.sh test3m.diffs
fi


	
# ---------------------------------------------------------------------
# 	check the read command
#	this differs from how the real shell parses line
#	then assigns tokens to variables until no more
# ---------------------------------------------------------------------

echo -n "	* Test 4: Does the shell read in variables correctly?
		"
ME=`id | cut -d'(' -f2 | cut -d')' -f1`
# set `who am i`
echo 'read NAME
echo hello, $NAME
read LSARGS
ls $LSARGS' > test4.scr
echo $ME > test4.in
echo "-l /tmp" >> test4.in
cat test4.in | $PROG   test4.scr > test4.out.smsh
cat test4.in | /bin/sh test4.scr > test4.out.sh
rm test4.in

if diff test4.out.smsh test4.out.sh > test4.diffs
then
	echo "OK"
else
	echo "Did not work for"
	cat test4.scr
	echo "The problem could be that read does not work,"
	echo "or the problem could be your shell is treating $LSARGS as"
	echo "on token even though it contains two strings"
	echo -n "Continue with tests? (yN) "
        read answer
        case "$answer" in 
                y*|Y*)  ;;
                *)      exit ;;
        esac
fi

rm -f test4.scr test4.out.smsh test4.out.sh test4.diffs

# ---------------------------------------------------------------------
# 	check the if command with some syntax errors
# ---------------------------------------------------------------------

echo -n "	* Test 5a: Does one-level if and else work?
		"
echo 'LOOKFOR=root
ETC=etc
WORD=wd
if grep $LOOKFOR /$ETC/pass$WORD
then
	echo this system has a root login
	echo that is a good thing
else
	echo something is wrong here
	echo there is no login for root
fi' > test5.scr

$PROG   test5.scr > test5.out.smsh
/bin/sh test5.scr > test5.out.sh

if diff test5.out.smsh test5.out.sh > test5.diffs
then
	echo "OK"
else
	echo "Did not work for"
	cat test5.scr
fi

rm -f test5.scr test5.out.smsh test5.out.sh test5.diffs

# ------------------- error test 1 ----------------------------

echo -n "	* Test 5b: Does the if detect missing thens ?
		"
echo 'LOOKFOR=root
ETC=etc
WORD=wd
if grep $LOOKFOR /$ETC/pass$WORD
	echo this system has a root login
	echo that is a good thing
else
	echo something is wrong here
	echo there is no login for root
fi' > test5.scr

					# we should get errors

$PROG   test5.scr 2> test5.out.smsh >/dev/null

if grep unexpected test5.out.smsh
then
	echo "OK"
else
	echo "was hoping to find the word unexpected in error stream"
	echo "script looked like.."
	cat test5.scr
	echo "and error stream looked like"
	cat test5.out.smsh
	echo -n "Continue with tests (y/n)? "
	read answer
	case "$answer" in 
		y*|Y*)	;;
		*)	exit ;;
	esac
fi
 

rm -f test5.scr test5.out.smsh test5.out.sh test5.diffs

# ------------------- error test 2 ----------------------------

echo -n "	* Test 5c: Does the if command find unexpected EOFS?
		"
echo 'LOOKFOR=root
ETC=etc
WORD=wd
if grep $LOOKFOR /$ETC/pass$WORD
then
	echo this system has a root login
	echo that is a good thing
else
	echo something is wrong here
	echo there is no login for root' > test5.scr

$PROG   test5.scr 2> test5.out.smsh

					# we should get errors

$PROG   test5.scr 2> test5.out.smsh >/dev/null

if grep unexpected test5.out.smsh
then
	echo "OK"
else
	echo "was hoping to find the word unexpected in error stream"
	echo "script looked like.."
	cat test5.scr
	echo "and error stream looked like"
	cat test5.out.smsh
	echo -n "Continue with tests (y/n)? "
	read answer
	case "$answer" in 
		y*|Y*)	;;
		*)	exit ;;
	esac
fi

rm -f test5.scr test5.out.smsh 

# ------------------- error test 3 ----------------------------

echo -n "	* Test 5d: Does the if catch missing ifs?
		"
echo 'LOOKFOR=root
ETC=etc
WORD=wd
grep $LOOKFOR /$ETC/pass$WORD
then
	echo this system has a root login
	echo that is a good thing
else
	echo something is wrong here
	echo there is no login for root
fi' > test5.scr

$PROG   test5.scr 2> test5.out.smsh
					# we should get errors

$PROG   test5.scr 2> test5.out.smsh >/dev/null

if grep unexpected test5.out.smsh
then
	echo "OK"
else
	echo "was hoping to find the word unexpected in error stream"
	echo "script looked like.."
	cat test5.scr
	echo "and error stream looked like"
	cat test5.out.smsh
	echo -n "Continue with tests (y/n)? "
	read answer
	case "$answer" in 
		y*|Y*)	;;
		*)	exit ;;
	esac
fi

rm -f test5.scr test5.out.smsh 


# ---------------------------------------------------------------------
# 	check the exit command
#	generate a random 2-digit number from pid
#	write a script and then check $?
# ---------------------------------------------------------------------

echo -n "	* Test 6: Does the shell process the exit built-in ok?
		"
NUM=`expr $$ : '\(..\).*'`		# pick a number
echo "echo hello
echo about to exit with code $NUM
exit $NUM
echo should not print this line" > test6.scr
/bin/sh test6.scr > test6.out.sh
$PROG   test6.scr > test6.out.smsh
RESULT=$?

OOPS=NO
if diff test6.out.smsh test6.out.sh > test6.diffs
then
	if test $RESULT = $NUM
	then
		echo "OK"
	else
		echo "Did not exit with correct exit value"
		OOPS=YES
	fi
else
	echo "Output did not look ok."
	OOPS=YES
fi

if test $OOPS = "YES"
then
	echo "script looked like.."
	cat test6.scr
	echo "and output stream looked like"
	cat test6.out.smsh

	echo -n "Continue with tests (y/n)? "
	read answer
	case "$answer" in 
		y*|Y*)	;;
		*)	exit ;;
	esac
fi
rm -f test6.out.sh test6.out.smsh test6.diffs test6.scr

# ---------------------------------------------------------------------
# 	check the nested if
# ---------------------------------------------------------------------

echo -n "	* Test 7: Does nested if work?
		"
echo '
CMD=echo
echo Output should consist of lines 1 2 3 4 5 6
if echo line 1
then
	$CMD line 2
	if false
	then
		echo error 1
		echo error 2
	else
		if echo line 3
		then
			echo line 4
		else
			echo error 3
		fi
	fi
	echo line 5
else
	if true
	then
		echo error 4
	else
		echo error 5
	fi
	echo error 6
fi
echo line 6' > test7.scr

$PROG   test7.scr > test7.out.smsh
/bin/sh test7.scr > test7.out.sh

	sed 's/^/	/' test7.out.smsh

if diff test7.out.smsh test7.out.sh > test7.diffs
then
	echo "OK"
else
	echo "Did not work for"
	cat test7.scr
	echo -n "Continue with tests (y/n)? "
	read answer
	case "$answer" in 
		y*|Y*)	;;
		*)	exit ;;
	esac
fi

rm -f test7.scr test7.out.smsh test7.out.sh test7.diffs

# ---------------------------------------------------------------------
# 	7d: deep nesting
# ---------------------------------------------------------------------

echo -n "	* Test 7d: Does nested if work for deep structures?
		"
for f in $DEEPDIR/deep*
do
	B=`basename $f`
	echo "  Testing $B"

	$PROG      $f > test7d.$B.out.smsh
	/bin/sh    $f > test7d.$B.out.sh

	if diff test7d.$B.out.smsh test7d.$B.out.sh > test7d.$B.diffs
	then
		echo "OK"
	else
		echo "Did not work for"
		cat $f
		echo -n "Continue with tests (y/n)? "
		read answer
		case "$answer" in 
			y*|Y*)	;;
			*)	exit ;;
		esac
	fi
done

rm -f test7d.deep?.out.smsh test7d.deep?.out.sh test7d.deep?.diffs

# ---------------------------------------------------------------------
# 	a manual test.  Why do all the work for students?
# ---------------------------------------------------------------------

echo -n "	* Test 8: A manual test
		"
echo "
	Does your shell reject assignment statements of the
	form   
		9xyz=tuna  
	or      x.y=fun
	
	 That is, assignments to names that are not legal
	variable identifiers"
